
Technical Overview
------------------

An important component of the MKS is the regression technique for rapid
calculation of a response field :math:`p_i` based on a microstructure
:math:`m_i`, where the index :math:`i` refers to a spatial location
often in 2D or 3D. For example, the microstructure might represent
values of material properties that vary based on phase such as elastic
modulus or Poisson's ratio while the response might be the stress or
strain field.

Discretize in State Space
~~~~~~~~~~~~~~~~~~~~~~~~~

The first step in the MKS is to bin (or discretize) the state space. To
so this, the microstructure :math:`m_i` and is discretized and then
represented by :math:`m^h_i` such that

.. math::  m_i = \sum_h m_{i,h} \chi_h 

where :math:`\chi_h` is the basis representation for the microstructure.

The following image represents one form of discretization. State space
discrtization is analogous to splitting the data into channels in signal
processing. For example, a value of 0.049 is represented by (0.76, 0.24,
0, 0, 0, 0) when discretized into 6 bins sampled over an interval of 0
to 1.

.. code:: python

    from IPython.display import Image
    Image(filename='microstructure.png')



.. image:: intro_files/intro_1_0.png



The Influence Coefficients
~~~~~~~~~~~~~~~~~~~~~~~~~~

Once the state space is discretized, the relationship between the
response :math:`p_i` and microstructure :math:`m_{i,h}` can be written
as,

.. math::  p_i = \sum_h \sum_j \alpha_{j,h} m_{i + j,h} 

where the :math:`\alpha_{j,h}` are known as the influence coefficients
and describe the relationship between :math:`p_i` and :math:`m_j`. The
:math:`p_i` are a spatial convolution of :math:`\alpha_{j,h}` and
:math:`m_j`. In general, it is assumed that both :math:`m_j` and
:math:`p_i` are periodic.

\*\*\* Note that the formulation above has dropped an index representing
the samples for simplicity. Generally the MKS is calibrated using many
samples. \*\*\*

The Convolution
~~~~~~~~~~~~~~~

The efficiency of the MKS is due to solving the linear regression in
Fourier space. For a 2D problem of size :math:`N^2`, the size of the
regression is reduced from $ (N^2 N\_{} N^2 H )$ to
:math:`\left(N_{\text{sample}} \times H \right)` for each point in the
Fourier space of size :math:`N^2`. The convolution,

.. math::  \sum_h \sum_j \alpha_{j,h} m_{i + j,h} 

can be deconvolved in Fourier space using `circular convolution
theorem <http://en.wikipedia.org/wiki/Discrete_Fourier_transform#Circular_convolution_theorem_and_cross-correlation_theorem>`__

If we write :math:`P_{k} =  \mathcal{F}_k \left( p_{i} \right)`,
:math:`M_{k,h} = \mathcal{F}_k  \left( m_{i,h} \right)` and
:math:`\beta_{k,h} = \mathcal{F}_k \left(  \alpha_{i,h} \right)`, then
we just need to solve

.. math::  P_{k} = \sum_h \beta_{k,h} M_{k,h} 

with a linear regression at each discretization location in :math:`k` to
calculate the :math:`\beta_{k,h}`.

A PyMKS Example
---------------

One important application of the MKS is to accurately and rapidly
reproduce simulations for any given microstructure. In order to do this
we need to instantiate a ``MKSRegressionModel`` and calibrate the
influence coefficients using the ``fit`` method. Once the influence
coefficients have been calibrated, the ``predict`` method can be used to
quickly reproduce the same simulation for any microstructure. The rest
of the page will demonstrate how to do this for a finite element
simulation of the linear elastic strain.

Linear Elasticity
-----------------

Let's start by running a finite element simulation on a two phase random
microstructure with different elastic moduli. The
``ElasticFESimulation`` class encapsulates the code needed to run a
plain strain problem using SfePy. It solves a plain strain problem on a
square domain by straining in the x-direction and applying periodic
boundary conditions in the y-direction. The two phase microstructure is
represented by ``X``.

The ``make_elasticFEstrain_random`` function from ``pymks.datasets``
provides a convenient interface to get random microstructures and their
strain fields from ``ElasticFESimulation``. In this case we are going to
look at a 15 by 15 two phase microstructure with values of 80 and 120.
Both phases will have a Poisson's ratio of 0.3.

.. code:: python

    %matplotlib inline
    %load_ext autoreload
    %autoreload 2
    
    import numpy as np
    import matplotlib.pyplot as plt
    from mpl_toolkits.axes_grid1 import make_axes_locatable
.. code:: python

    from pymks.tools import draw_microstructure_strain
    from pymks.datasets import make_elasticFEstrain_random
    
    np.random.seed(21)
    X, strains = make_elasticFEstrain_random(n_samples=1, elastic_modulus=(80, 120),
                                             poissons_ratio=(0.3, 0.3), size=(15, 15))
    
    draw_microstructure_strain(X[0], strains[0])


.. image:: intro_files/intro_6_0.png


Create the Delta Microstructures
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The goal of the MKS it to quickly reproduce the finite element
simulation shown above. In the case of linear elasticity where we are
looking at distinct phases, the MKS model can be calibrated with a delta
microstructures and the ``fit`` method. The
``make_delta_microstructures`` function from ``pymks.datasets`` provides
an interface to produce the delta microstructures that can be used to
calibration the influence coefficients.

.. code:: python

    from pymks.tools import draw_microstructures
    from pymks.datasets import make_delta_microstructures
    
    X_delta = make_delta_microstructures(n_phases=2, size=(15, 15))
    draw_microstructures(X_delta[0], X_delta[1])


.. image:: intro_files/intro_8_0.png


Create the Responses
~~~~~~~~~~~~~~~~~~~~

The ``make_elasticFEstrain_delta`` function from ``pymks.datasets``
creates not only the delta microstructures but also their strain fields.
These strain fields and microstructures can then be used as in the
inputs to calibrate the influence coefficients.

.. code:: python

    from pymks.datasets import make_elasticFEstrain_delta
    
    X_delta, strains_delta = make_elasticFEstrain_delta(elastic_modulus=(80, 120),
                                                        poissons_ratio=(0.3, 0.3),
                                                        size=(15, 15))
    
    draw_microstructure_strain(X_delta[0], strains_delta[0])


.. image:: intro_files/intro_10_0.png


Calibrate the MKS Model
~~~~~~~~~~~~~~~~~~~~~~~

Now lets instantiate a\ ``DiscreteIndicatorBasis`` and a
``MKSRegressionModel`` and use the microstructures and strain fields
created by ``make_elasticFEstrain_delta`` to calibrate the influence
coefficients using the ``fit`` method.

.. code:: python

    from pymks import MKSRegressionModel
    from pymks.bases import DiscreteIndicatorBasis
    
    basis = DiscreteIndicatorBasis(n_states=2)
    
    X_delta, y_delta = X_delta, strains_delta
    model = MKSRegressionModel(basis=basis)
    model.fit(X_delta, y_delta)
Reproduce the Finite Element Simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that the influence coefficients have been calibrated using the
``fit`` method, the original finite element simulation can be reproduced
using the ``MKSRegressionmModel`` by passing the original microstructure
into the ``predict`` method.

.. code:: python

    from pymks.tools import draw_strains_compare
    
    X, y = X, strains
    y_pred = model.predict(X)
    draw_strains_compare(y[0], y_pred[0]);


.. image:: intro_files/intro_14_0.png


The ``MKSRegressionModel`` has done quite a good job of predicting the
results from the original FE simulation after calibrating the influence
coefficients using delta microstructures.

Comments
~~~~~~~~

The MKS coefficients can then be scaled up to reproduce larger FE
simulations using only the small FE simulation to seed the MKS model.

\*\* Note that the cells close to the left and right side of the domain
are not well predicted. This is due to issues with the SfePy FE solver
and periodic boundary conditions. This should be ironed out soon. \*\*
