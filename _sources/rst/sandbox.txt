
.. code:: python

    %matplotlib inline
    %load_ext autoreload
    %autoreload 2
    
    import numpy as np
    import matplotlib.pyplot as plt
    from pymks import ElasticFEModel
    from pymks import MKSRegressionModel

.. code:: python

    def _getProp(X, E1, E2, nu1, nu2):
        X_prop = np.zeros(X.shape + (2,))
        X_prop[...,0] = np.where(X == 1, E1, E2)
        X_prop[...,1] = np.where(X == 1, nu1, nu2)
        return X_prop
    
    def getPlot(X,title='title'):
        plt.figure()
        plt.imshow(X)
        plt.title(title)
        plt.colorbar()
        
    def getPlots(y, yMKS, model):
        getPlot(y[0,...,0],'FE')
        getPlot(np.abs(y[0,...,0]-yMKS[0]) * 100,'MKS Absolute % Error')
        getPlot(model.coeff.copy()[...,0],'Coeff0')
        #getPlot(model.coeff[...,1],'Coeff1')
        
    def getDel(L):
        C = (L-1)/2
        Del = np.zeros((2, L, L))
        Del[0, C, C] = 1
        Del[1] = np.abs(Del[0]-1)
        return Del
    
    def getProp(X):
        E1 = 80
        E2 = 120
        nu1 = 0.3
        nu2 = 0.3
        return _getProp(X, E1, E2, nu1, nu2)
    
    def getRand(L):
        return np.random.randint(2, size=(1, L, L))
    
    def getCoeffplots(model):
        getPlot(model.coeff[...,0],'Coeff0')
        #getPlot(model.coeff[...,1],'Coeff1')
.. code:: python

    L = 12
    
    Del = getDel(L)
    FEmodel = ElasticFEModel()
    MKSmodel = MKSRegressionModel(Nbin=2)
    MKSmodel.fit(Del, FEmodel.predict(getProp(Del))[...,0])
    
    X = getRand(L)
    y = FEmodel.predict(getProp(X))
    yMKS = MKSmodel.predict(X)
    #getPlots(y, yMKS, MKSmodel)
    
    resize = 4
    
    XL = getRand(resize * L)
    y_resize = FEmodel.predict(getProp(XL))
    MKSmodel.resize_coeff((resize * L, resize * L))
    y_resizeMKS = MKSmodel.predict(XL)
    getPlots(y_resize, y_resizeMKS, MKSmodel)
    #getCoeffplots(MKSmodel)
    
    BigDel = getDel(resize * L)
    BigMKSmodel = MKSRegressionModel(Nbin=2)
    BigMKSmodel.fit(BigDel, FEmodel.predict(getProp(BigDel))[...,0])
    #getCoeffplots(BigMKSmodel)
    
    yBig = BigMKSmodel.predict(XL)
    getPlots(y_resize, yBig, BigMKSmodel)
    
    Bigcoeff = BigMKSmodel.coeff.copy()
    resized_coeff = MKSmodel.coeff.copy()
    plt.figure()
    plt.imshow(np.abs(resized_coeff[...,0] - Bigcoeff[...,0]) * 100)
    plt.title('Coeff0 Absolute Error %')
    plt.colorbar()


.. parsed-literal::

    sfepy: matrix shape: (1151, 1151)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.00 s
    sfepy: matrix structural nonzeros: 35087 (2.65e-02% fill)
    sfepy: matrix shape: (1151, 1151)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.00 s
    sfepy: matrix structural nonzeros: 35087 (2.65e-02% fill)
    sfepy: matrix shape: (1151, 1151)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.00 s
    sfepy: matrix structural nonzeros: 35087 (2.65e-02% fill)
    sfepy: matrix shape: (18431, 18431)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.04 s
    sfepy: matrix structural nonzeros: 582863 (1.72e-03% fill)
    sfepy: matrix shape: (18431, 18431)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.04 s
    sfepy: matrix structural nonzeros: 582863 (1.72e-03% fill)
    sfepy: matrix shape: (18431, 18431)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.04 s
    sfepy: matrix structural nonzeros: 582863 (1.72e-03% fill)




.. parsed-literal::

    <matplotlib.colorbar.Colorbar instance at 0x6171cb0>




.. image:: sandbox_files/sandbox_2_2.png



.. image:: sandbox_files/sandbox_2_3.png



.. image:: sandbox_files/sandbox_2_4.png



.. image:: sandbox_files/sandbox_2_5.png



.. image:: sandbox_files/sandbox_2_6.png



.. image:: sandbox_files/sandbox_2_7.png



.. image:: sandbox_files/sandbox_2_8.png


.. code:: python

    n = 5
    
    Length = 9
    s = np.zeros(n)
    k0 = np.zeros(n)
    for ii in range(n):
        BigDel = getDel((ii+1)*Length)
        BigMKSmodel = MKSRegressionModel(Nbin=2)
        BigMKSmodel.fit(BigDel, FEmodel.predict(getProp(BigDel))[...,0])
        print (ii+1)*Length
        s[ii] = BigMKSmodel.coeff[0,0,1]
        k0[ii] = BigMKSmodel.Fcoeff[0,0,1]

.. parsed-literal::

    sfepy: matrix shape: (647, 647)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.00 s
    sfepy: matrix structural nonzeros: 19391 (4.63e-02% fill)
    sfepy: matrix shape: (647, 647)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.00 s
    sfepy: matrix structural nonzeros: 19391 (4.63e-02% fill)
    9
    sfepy: matrix shape: (2591, 2591)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.01 s
    sfepy: matrix structural nonzeros: 80303 (1.20e-02% fill)
    sfepy: matrix shape: (2591, 2591)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.01 s
    sfepy: matrix structural nonzeros: 80303 (1.20e-02% fill)
    18
    sfepy: matrix shape: (5831, 5831)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.01 s
    sfepy: matrix structural nonzeros: 182687 (5.37e-03% fill)
    sfepy: matrix shape: (5831, 5831)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.01 s
    sfepy: matrix structural nonzeros: 182687 (5.37e-03% fill)
    27
    sfepy: matrix shape: (10367, 10367)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.02 s
    sfepy: matrix structural nonzeros: 326543 (3.04e-03% fill)
    sfepy: matrix shape: (10367, 10367)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.02 s
    sfepy: matrix structural nonzeros: 326543 (3.04e-03% fill)
    36
    sfepy: matrix shape: (16199, 16199)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.03 s
    sfepy: matrix structural nonzeros: 511871 (1.95e-03% fill)
    sfepy: matrix shape: (16199, 16199)
    sfepy: assembling matrix graph...
    sfepy: ...done in 0.04 s
    sfepy: matrix structural nonzeros: 511871 (1.95e-03% fill)
    45


.. parsed-literal::

    -c:12: ComplexWarning: Casting complex values to real discards the imaginary part


.. code:: python

    x = np.arange(n)
    
    plt.figure()
    plt.plot(x, s)
    plt.title('real space')
    plt.figure()
    plt.plot(x, k0)
    plt.title('K space')
    
    y = k0/k0[0]
    print y
    print 1./(x+1.)
    
    
    plt.figure()
    ys = s/s[0]
    print ys
    print 1./((x+1.)**3.)

.. parsed-literal::

    [ 1.          0.5         0.33333333  0.25        0.2       ]
    [ 1.          0.5         0.33333333  0.25        0.2       ]
    [ 1.          0.125       0.03703704  0.015625    0.008     ]
    [ 1.          0.125       0.03703704  0.015625    0.008     ]



.. image:: sandbox_files/sandbox_4_1.png



.. image:: sandbox_files/sandbox_4_2.png



.. parsed-literal::

    <matplotlib.figure.Figure at 0x4f15610>



